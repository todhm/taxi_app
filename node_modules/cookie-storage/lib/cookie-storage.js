"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var format_cookie_1 = require("./format-cookie");
var parse_cookies_1 = require("./parse-cookies");

var CookieStorage = function () {
    function CookieStorage(defaultOptions) {
        _classCallCheck(this, CookieStorage);

        this._defaultOptions = Object.assign({
            path: null,
            domain: null,
            expires: null,
            secure: false
        }, defaultOptions);
        if (typeof Proxy !== 'undefined') {
            return new Proxy(this, CookieStorageHandler);
        }
    }

    _createClass(CookieStorage, [{
        key: "clear",
        value: function clear() {
            var _this = this;

            var parsed = parse_cookies_1.parseCookies(this._getCookie());
            var keys = Object.keys(parsed);
            keys.forEach(function (key) {
                return _this.removeItem(key);
            });
        }
    }, {
        key: "getItem",
        value: function getItem(key) {
            var parsed = parse_cookies_1.parseCookies(this._getCookie());
            return parsed.hasOwnProperty(key) ? parsed[key] : null;
        }
    }, {
        key: "key",
        value: function key(index) {
            var parsed = parse_cookies_1.parseCookies(this._getCookie());
            var sortedKeys = Object.keys(parsed).sort();
            return index < sortedKeys.length ? sortedKeys[index] : null;
        }
    }, {
        key: "removeItem",
        value: function removeItem(key, cookieOptions) {
            var data = '';
            var options = Object.assign({}, this._defaultOptions, cookieOptions, {
                expires: new Date(0)
            });
            var formatted = format_cookie_1.formatCookie(key, data, options);
            this._setCookie(formatted);
        }
    }, {
        key: "setItem",
        value: function setItem(key, data, options) {
            var opts = Object.assign({}, this._defaultOptions, options);
            var formatted = format_cookie_1.formatCookie(key, data, opts);
            this._setCookie(formatted);
        }
    }, {
        key: "_getCookie",
        value: function _getCookie() {
            return typeof document === 'undefined' ? '' : typeof document.cookie === 'undefined' ? '' : document.cookie;
        }
    }, {
        key: "_setCookie",
        value: function _setCookie(value) {
            document.cookie = value;
        }
    }, {
        key: "length",
        get: function get() {
            var parsed = parse_cookies_1.parseCookies(this._getCookie());
            var keys = Object.keys(parsed);
            return keys.length;
        }
    }]);

    return CookieStorage;
}();

exports.CookieStorage = CookieStorage;
var CookieStorageHandler = {
    get: function get(target, p) {
        if (p in target) {
            return target[p];
        } else {
            var result = target.getItem(p.toString());
            return result ? result : undefined;
        }
    },
    set: function set(target, p, value) {
        target.setItem(p.toString(), value);
        return true;
    },
    has: function has(target, p) {
        if (p in target) {
            return true;
        } else {
            return target.getItem(p.toString()) ? true : false;
        }
    },
    deleteProperty: function deleteProperty(target, p) {
        target.removeItem(p.toString());
        return true;
    },
    defineProperty: function defineProperty(target, p, attributes) {
        var isExtensible = Object.isExtensible(target);
        var alreadyExists = target.getItem(p.toString());
        if (!isExtensible && !alreadyExists) {
            throw new TypeError("Can't add property " + p.toString() + ", object is not extensible");
        } else {
            target.setItem(p.toString(), attributes.value);
            return true;
        }
    },
    ownKeys: function ownKeys(target) {
        var keys = [];
        for (var i = 0; i < target.length; i++) {
            if (target.key(i) == null) {
                continue;
            } else {
                keys.push(target.key(i));
            }
        }
        return keys;
    },
    getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, p) {
        if (p in target) {
            return undefined;
        } else {
            return {
                value: target.getItem(p.toString()),
                writable: true,
                enumerable: true,
                configurable: true
            };
        }
    }
};